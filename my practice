# Lab - Week 2 - More SQL and PostGIS Basics

## Goal of Lab

* Use PostGIS functions to explore properties of geometries in dataset
* Combine PostGIS with other PostgreSQL `WHERE` conditions, `GROUP BY`s, `ORDER BY`s, etc.
* Deal with the quirks of messy data
* Get familiar with some OpenStreetMap data

## Dataset

**Dataset:** OpenStreetMap Buildings for University City Neighborhood
* [Preview data](https://github.com/MUSA-509/week-2-digging-into-databases/blob/master/data/university_city_osm_buildings.geojson)
* Download link (copy and paste this into the Carto upload tool): `https://raw.githubusercontent.com/MUSA-509/week-2-digging-into-databases/master/data/university_city_osm_buildings.geojson`

I fetched this data from GeoFabrik's wonderful OSM download service. I downloaded the [Pennsylvania](https://download.geofabrik.de/north-america/us/pennsylvania.html) file and filtered to only included building footprints that land in University City neighborhood in Philadelphia.

About the dataset, notice the schema:

- `cartodb_id` (number, actually an integer): Carto adds this as a utility for optimizing performance of this table. It wasn't in the original dataset.
- `the_geom` (geometry): Carto uses `the_geom` for the geometry column. In the GeoJSON it was `geometry` as per the [GeoJSON specification](https://geojson.org/).
- `osm_id` (string): A unique identifier for this geometry in the OSM database
- `code` (number): OSM code for type building. This are all the same in this dataset.
- `fclass` (string): Description of OSM feature. All are `building` here.
- `name` (string): Name of building. Note: many are not named
- `building_type` (string): Type of building (if assigned). Notice that many are null valued.

## Recommended Workflow

1. Upload data to your Carto account
2. Open dataset in map or data view and toggle on the SQL panel
3. Clone this repository or download the `Lab.md` Markdown file
4. Edit the file in your favorite text editor. Here are two recommendations:
  * [Atom](https://atom.io/) -- my favorite
  * [VS Code](https://code.visualstudio.com/)

## Find Average Area (in square meters) of all buildings

Use the PostGIS function [`ST_Area`](https://postgis.net/docs/ST_Area.html). Since our geometries are in WGS84, we need to use `geography` type casting (`the_geom::geography`).
Notice: :: is used for casting
```SQL
--
SELECT avg(ST_Area(the_geom::geography)) AS avg_area_sq_m
FROM university_city_osm_buildingsEnter
```

## Find Average Area (in square meters) of buildings by type

Write a query to give:

* type of building
* average area of building by type
* count of buildings of this type

```SQL
SELECT building_type,
avg(ST_Area(the_geom::geography))
count(building_type) AS cnt
FROM university_city_osm_buildings
Group by building_type
```
Andy's answer
```SQL
SELECT building_type, avg(ST_Area(the_geom::geography)) as avg_area_sq_m,
count(*) as building_count
FROM andyepenn.university_city_osm_buildings
GROUP BY building_type
```
Question: any different using * or building_type in count function?

## Which university building is largest? Smallest?

Which building is largest?

```SQL
SELECT name, ST_Area(the_geom::geography) AS maximum
FROM university_city_osm_buildings
Order by maximum DESC
Limit 1
```
Andy's answer
```SQL
SELECT building_type, name, ST_Area(the_geom::geography) as building_area_sq_m
FROM andyepenn.university_city_osm_buildings
ORDER BY ST_Area(the_geom::geography) DESC
LIMIT 1
```

Which building is smallest?

```SQL
SELECT name, ST_Area(the_geom::geography) AS minimum
FROM university_city_osm_buildings
Order by minimum ASC
Limit 1
```
Andy's answer
```SQL
SELECT building_type, name, ST_Area(the_geom::geography) as building_area_sq_m
FROM andyepenn.university_city_osm_buildings
ORDER BY ST_Area(the_geom::geography) ASC
LIMIT 1
```

##Smallest with a building name that is not null:

```SQL
SELECT building_type, name, ST_Area(the_geom::geography) as building_area_sq_m
FROM andyepenn.university_city_osm_buildings
WHERE name is not null
ORDER BY ST_Area(the_geom::geography) ASC
LIMIT 1
```
question: when to use is not, when to use !=
eventhough the result is the same, the things behind it is not:https://www.sqlservercentral.com/articles/understanding-the-difference-between-is-null-and-null
https://social.msdn.microsoft.com/Forums/sqlserver/en-US/8cf53a16-98e0-4025-bbda-a034a640a2c0/how-do-i-check-if-ansinulls-is-turned-on-or-not?forum=transactsql
when it comes to NULL, always use is or is not
And how to check if the ANSI_NULLS ON OR OFF(preferably on)
```SQL
if null=null
  print 'ANSI NULLs are off'
Else
  print 'ANSI NULLs are on'
```

## What is the area (in square meters) of Meyerson Hall?

```SQL
SELECT ST_Area(the_geom::geography)
FROM university_city_osm_buildings
WHERE name = 'Meyerson Hall'
```
Andy's answer
```SQL
SELECT building_type, name, ST_Area(the_geom::geography) as building_area_sq_m
FROM andyepenn.university_city_osm_buildings
WHERE name = 'Meyerson Hall'
```

## Find the 10 closest buildings to Meyerson Hall

Using the [`ST_Distance`](https://postgis.net/docs/ST_Distance.html) function, find the 10 closest buildings to Meyerson Hall.

Hint: We can use `ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)` for the geometry to represent Meyerson Hall.

Note: SRID means coordinate system, WGS84 is also called (SRID 4326)

```SQL
float ST_Distance(geometry g1, geometry g2)
float ST_Distance(geography gg1, geography gg2)
float ST_Distance(geography gg1, geography gg2, boolean use_spheroid)
```
geometry type arguments: allows you to measure the distance in degrees (lat/long)
geography type arguments: allows you to measure the distance in meters
use_spheroid argument: use WGS84’s oblate spheroid earth (pass true) or assume the earth is perfectly spherical (pass false)

Two things to notice about this function. First, we cannot mix projection types. For example, you cannot measure the distance between a value in the_geom and a value in the_geom_webmercator. Second, the function returns a float point data type that is a measurement in the same units as the input projection.

Let’s say you want to measure the distance between two points stored in the_geom that we can call the_geom_a and the_geom_b. If you input them both into ST_Distance(the_geom_a, the_geom_b) the result would come back in units of WGS84. This is not very useful because the answer is in degrees, therefore we need :: for casting

```SQL
SELECT name, ST_Distance(the_geom, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326), true) AS building_dist
FROM university_city_osm_buildings
ORDER BY building_dist ASC
LIMIT 10
```
Andy's answer
```SQL
SELECT
    building_type,
    name,
    ST_Distance(
      the_geom::geography,
      ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)::geography
    ) as building_distance_m
FROM
    andyepenn.university_city_osm_buildings
ORDER BY
    ST_Distance(the_geom::geography, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)::geography) ASC
LIMIT 10
```

## Find the 10 closest buildings to Meyerson Hall using the distance operator

PostGIS has a [distance operator (`<->`)](https://postgis.net/docs/geometry_distance_knn.html) that allows one to do distance ordering in an `ORDER BY`.

```SQL
SELECT name,
ST_Distance(the_geom, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326), true) AS building_dist
FROM university_city_osm_buildings
ORDER BY the_geom :: geography <-> ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography
LIMIT 10
```
Andy's answer
```SQL
SELECT
    building_type,
    name,
    ST_Distance(
      the_geom::geography,
      ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)::geography
    ) as building_distance_m
FROM andyepenn.university_city_osm_buildings
ORDER BY the_geom::geography <-> ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)::geography
LIMIT 10
```

## Find the 10 closest buildings to Meyerson Hall excluding Meyerson Hall

Use the [`ST_Intersects`](https://postgis.net/docs/ST_Intersects.html) function to exclude Meyerson Hall. We know that Meyerson Hall is at the point `ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326)`. `ST_Intersects` returns true/false/null. To only included geometries that do not intersect, precede `ST_Intersects` with `NOT`.

```SQL
SELECT name, ST_Distance(the_geom::geography, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography) AS building_dist
FROM university_city_osm_buildings
WHERE Not ST_Intersects(the_geom::geography, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography)
ORDER BY the_geom::geography <-> ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography
LIMIT 10
```
I'd remove the geography casting here because the intersects in the 2d plane of geometries is good and faster:
```SQL
ST_Intersects(the_geom, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326))
```
Andy's Answer
```SQL
SELECT name, ST_Distance(the_geom::geography, ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography) AS building_dist
FROM university_city_osm_buildings
WHERE name != 'Meyerson Hall'
ORDER BY the_geom::geography <-> ST_SetSRID(ST_MakePoint(-75.19265679, 39.9522405), 4326):: geography
LIMIT 10
```
## Compute and Map the Convex Hull of all of the buildings

Use the [`ST_ConvexHull`](https://postgis.net/docs/ST_ConvexHull.html) function to find the minimum convex shape that includes all of the buildings in University City. See step 5 in the [Mapping Follow Along](https://github.com/MUSA-509/week-2-digging-into-databases#mapping-follow-along) from this week's lecture.

the_geom means coordinates

```SQL
SELECT
	the_geom,
   ST_Transform(the_geom, 4326) as the_geom_wgs84,
   1 AS cartodb_id
FROM(
	SELECT ST_ConvexHull(ST_Collect(the_geom))
	FROM university_city_osm_buildings
  	) AS w
```
error: the_geom does not exit

Andy's Answer
```SQL
SELECT
    ST_ConvexHull(
      ST_Collect(the_geom)
    ) as the_geom,
    ST_Transform(
      ST_ConvexHull(
        ST_Collect(the_geom)
      ),
      3857
    ) as the_geom_webmercator,
    1 as cartodb_id
FROM andyepenn.university_city_osm_buildings
```
Note: I added the utility columns the_geom_webmercator and cartodb_id so that we could visualize this on a map.

## Finding Largest / Smallest buildings by class

This query gives us the largest building (by building footprint area) for each building class:

```SQL
SELECT
  ST_Area(b.the_geom::geography) as area,
  b.name,
  b.building_type
FROM andyepenn.university_city_osm_buildings as b
JOIN (
  SELECT max(ST_Area(the_geom::geography)) as maxarea, building_type
  FROM andyepenn.university_city_osm_buildings
  GROUP BY building_type
  ) as m
ON m.building_type = b.building_type AND ST_Area(b.the_geom::geography) = m.maxarea
```
error: the_geom_webmercator not found-when in map, we should use Mercator, but this code applies only to data not to map
```SQL
SELECT
  ST_Transform(the_geom,3857) as the_geom_webmercator,
  ST_Area(b.the_geom_webmercator) as area,
  b.name,
  b.building_type,
  1 as cartodb_id
FROM university_city_osm_buildings as b
```

Modify this query to give the **smallest** building for each class instead:

```SQL
SELECT
  ST_Area(b.the_geom::geography) as area,
  b.name,
  b.building_type
FROM university_city_osm_buildings as b
JOIN (
  SELECT min(ST_Area(the_geom::geography)) as minarea, building_type
  FROM university_city_osm_buildings
  GROUP BY building_type
  ) as m
ON m.building_type = b.building_type AND ST_Area(b.the_geom::geography) = m.minarea
```
